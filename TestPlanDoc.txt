1. Components to be Tested 

Front-End (React + Bootstrap) 

UI responsiveness across web and mobile devices 

Navigation between pages (Login, Signup, Product Display, Flyers, Favourites) 

Form validation (Login/Signup) 

Search and filter functionality 

Back-End (Spring Boot APIs) 

API endpoints for login, signup, search, and product comparison 

Data exchange between API and front-end (JSON validation) 

Error handling and response codes 

Database (MySQL) 

Data integrity for product details, store prices, and user info 

CRUD operations (insert, update, delete, fetch) 

Authentication data storage and retrieval 

Authentication 

User signup and login with valid/invalid credentials 

Session handling and logout functionality 

Password validation and error messages 

Features 

Price Comparison: Verify correct comparison between stores 

Flyers & Promotions: Ensure flyers load properly (real or mock data) 

Favourites: Test add/remove functionality and persistence 

Integrated Application (End-to-End) 

Full user journey: Signup → Login → Search → Compare → Save Favourites → Logout 

Performance testing (response time under load) 

Cross-browser testing (Chrome, Edge, Firefox, Safari) 

2.  Roles and Responsibilities 

Dilpreet Singh (Tester, UI/UX Designer, Project Coordinator) 

Create and execute test cases 

Report bugs in GitHub issues 

Validate UI/UX consistency across devices 

Navdeep Singh (Front-End Developer) 

Support testing of UI components 

Fix UI-related bugs 

Assist with responsiveness issues 

Parmjeet Singh (Back-End Developer) 

Support testing of APIs and database logic 

Fix backend bugs 

Ensure database integrity during tests 

 

3. Test Cases and Documentation 

Example Test Categories: 

Functional Tests 

Login with valid/invalid credentials 

Search returns correct product results 

Price comparison shows lowest/highest price correctly 

Flyers load with accurate store offers 

UI/UX Tests 

Responsive design check (desktop, tablet, mobile) 

Navigation flows smoothly without errors 

Integration Tests 

Front-end search connects to back-end API correctly 

Data retrieved from DB matches front-end display 

Performance Tests 

Load test with 50–100 simulated users 

API response time within acceptable limit (e.g., <2 seconds) 

Security Tests 

Prevent SQL Injection attempts 

Password encryption verified 

Session timeout handling 